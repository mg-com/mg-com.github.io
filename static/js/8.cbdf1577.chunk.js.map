{"version":3,"sources":["page/auth/login.js","firebase/auth.js"],"names":["validationSchema","yup","email","required","password","min","useStyles","makeStyles","theme","formControl","margin","TextField","ButtonAppBar","classes","formik","useFormik","initialValues","onSubmit","data","a","auth","useEffect","position","variant","className","title","maxWidth","handleSubmit","fullWidth","id","name","label","value","values","onChange","handleChange","error","touched","Boolean","errors","helperText","size","type","color","login","signInWithEmailAndPassword","then","res","console","log","user","emailVerified","localStorage","setItem","refreshToken","status","sendEmailVerification","signOut","catch","register","createUserWithEmailAndPassword","userCredential","logOut","clear"],"mappings":"iRAgBMA,EAAmBC,IAAW,CAChCC,MAAOD,IACG,oBACPC,MAAM,uBACNC,SAAS,qBACZC,SAAUH,IACA,uBACPI,IAAI,EAAG,qDACPF,SAAS,0BAGVG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,YAAY,CACRC,OAAO,YAEXC,UAAU,CACND,OAAO,gBAIA,SAASE,IACpB,IAAMC,EAAUP,IAEVQ,EAASC,YAAU,CACrBC,cAAe,CACXd,MAAO,GACPE,SAAU,IAEdJ,iBAAkBA,EAClBiB,SAAS,WAAD,4BAAE,WAAMC,GAAN,SAAAC,EAAA,sDACPC,IAAWF,GADJ,2CAAF,mDAAC,KAQb,OAJAG,qBAAU,eAKV,gCACI,cAAC,IAAD,CAAQC,SAAS,SAAjB,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAWX,EAAQY,MAA5C,4BAGR,cAAC,IAAD,CAAWC,SAAU,KAArB,SACI,uBAAMF,UAAWX,EAAQJ,YAAaQ,SAAUH,EAAOa,aAAvD,UACI,cAAC,IAAD,CAAYH,UAAWX,EAAQF,UAC3BiB,WAAS,EACTC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,MAAOlB,EAAOmB,OAAO/B,MACrBgC,SAAUpB,EAAOqB,aACjBC,MAAOtB,EAAOuB,QAAQnC,OAASoC,QAAQxB,EAAOyB,OAAOrC,OACrDsC,WAAY1B,EAAOuB,QAAQnC,OAASY,EAAOyB,OAAOrC,MAClDqB,QAAQ,WACRkB,KAAM,UAEV,cAAC,IAAD,CAAWjB,UAAWX,EAAQF,UAC1BiB,WAAS,EACTC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNW,KAAK,WACLV,MAAOlB,EAAOmB,OAAO7B,SACrB8B,SAAUpB,EAAOqB,aACjBC,MAAOtB,EAAOuB,QAAQjC,UAAYkC,QAAQxB,EAAOyB,OAAOnC,UACxDoC,WAAY1B,EAAOuB,QAAQjC,UAAYU,EAAOyB,OAAOnC,SACrDmB,QAAQ,WACRkB,KAAM,UAEV,cAAC,IAAD,CAAQE,MAAM,UAAUF,KAAM,QAASlB,QAAQ,YAAYK,WAAS,EAACc,KAAK,SAA1E,8B,2KCpFVE,EAAK,uCAAG,WAAM1B,GAAN,SAAAC,EAAA,sDACVC,IAAKyB,2BAA2B3B,EAAKhB,MAAOgB,EAAKd,UAChD0C,MAAK,SAACC,GAEH,OADAC,QAAQC,IAAIF,EAAIG,MACZH,EAAIG,KAAKC,eAQTC,aAAaC,QAAQ,QAAQN,EAAIG,KAAKI,cAC/B,CACHpC,KAAK6B,EAAIG,KACTK,OAAO,aAVXR,EAAIG,KAAKM,wBACTpC,IAAKqC,UACE,CACHF,OAAO,kBAWlBG,OAAM,SAAAtB,GAEH,OADAY,QAAQC,IAAIb,GACL,CACHA,MAAMA,EACNmB,OAAO,YAvBL,2CAAH,sDA4BLI,EAAW,SAACzC,GACdE,IAAKwC,+BAA+B1C,EAAKhB,MAAOgB,EAAKd,UAChD0C,MAAK,SAACe,GAKH,OAHAb,QAAQC,IAAIY,GACZA,EAAeX,KAAKM,wBACpBpC,IAAKqC,UACE,CAACF,OAAO,iBAElBG,OAAM,SAAAtB,GAEH,OADAY,QAAQC,IAAIb,GACL,CAACmB,OAAO,aAIrBO,EAAS,WACX1C,IAAKqC,UACJX,MAAK,WAEF,OADAM,aAAaW,SACN","file":"static/js/8.cbdf1577.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    TextField,\r\n    Container,\r\n    Button\r\n} from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport * as yup from 'yup'\r\n\r\nimport * as auth from \"../../firebase/auth\"\r\n// import { useHistory } from 'react-router-dom'\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n      .string('Enter your email')\r\n      .email('Enter a valid email')\r\n      .required('Email is required'),\r\n    password: yup\r\n      .string('Enter your password')\r\n      .min(8, 'Password should be of minimum 8 characters length')\r\n      .required('Password is required'),\r\n  })\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl:{\r\n        margin:'20vh 0px'\r\n    },\r\n    TextField:{\r\n        margin:'10px 0px'\r\n    }\r\n}))\r\n\r\nexport default function ButtonAppBar() {\r\n    const classes = useStyles()\r\n    // let history = useHistory()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: async(data) => {\r\n           auth.login(data)\r\n        },\r\n    })\r\n    useEffect(()=>{\r\n        // console.log(auth.currentUser)\r\n        \r\n    })\r\n    return (\r\n    <div>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>Login Page</Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container maxWidth={'sm'} >\r\n            <form className={classes.formControl} onSubmit={formik.handleSubmit}>\r\n                <TextField  className={classes.TextField}\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                    helperText={formik.touched.email && formik.errors.email}\r\n                    variant=\"outlined\"\r\n                    size={'small'}\r\n                />\r\n                <TextField className={classes.TextField}\r\n                    fullWidth\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    value={formik.values.password}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.password && Boolean(formik.errors.password)}\r\n                    helperText={formik.touched.password && formik.errors.password}\r\n                    variant=\"outlined\"\r\n                    size={'small'}\r\n                />\r\n                <Button color=\"primary\" size={'large'} variant=\"contained\" fullWidth type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n        </Container>\r\n    </div>\r\n    )\r\n}","\r\nimport {auth} from './index'\r\n\r\nconst login = async(data) => {\r\n    auth.signInWithEmailAndPassword(data.email, data.password)\r\n    .then((res)=>{\r\n        console.log(res.user)\r\n        if(!res.user.emailVerified){\r\n            res.user.sendEmailVerification()\r\n            auth.signOut()\r\n            return {\r\n                status:'unverified'\r\n            }\r\n            \r\n        }else{\r\n            localStorage.setItem('token',res.user.refreshToken)\r\n            return {\r\n                data:res.user,\r\n                status:'success'\r\n            }\r\n        }\r\n    })\r\n    .catch(error=>{\r\n        console.log(error)\r\n        return {\r\n            error:error,\r\n            status:'error'\r\n        }\r\n    })\r\n}\r\n\r\nconst register = (data) => {\r\n    auth.createUserWithEmailAndPassword(data.email, data.password)\r\n        .then((userCredential)=>{\r\n            // send verification mail.\r\n            console.log(userCredential)\r\n            userCredential.user.sendEmailVerification()\r\n            auth.signOut()\r\n            return {status:'sent_email'}\r\n        })\r\n        .catch(error=>{\r\n            console.log(error)\r\n            return {status:'error'}\r\n        })\r\n}\r\n\r\nconst logOut = () => {\r\n    auth.signOut()\r\n    .then(()=>{\r\n        localStorage.clear()\r\n        return true\r\n    })\r\n}\r\n\r\nconst user = () => {\r\n    return auth.currentUser\r\n}\r\n\r\nexport {login,register,logOut,user}"],"sourceRoot":""}